import numpy as npfrom astropy.io import fitsimport astropy.visualization as visualizationimport matplotlib.pyplot as pltfrom matplotlib.pyplot import imshowfrom kernels import convolveimport sysplt.style.use('mystyle-2.mplstyle')zscale = visualization.ZScaleInterval()def show(matrix):    plt.figure()    imshow(matrix)def reject_galaxies_radius(galaxylist,internalradius=8,ignoreborder=150):        print('- Loading Mask')    # import mask with objects to neglect and define the area of rejection    maskpath = '../Images/nostar_mask.fits'    hdulist=fits.open(maskpath)    mask = hdulist[0].data    mask=np.where(mask==1,0,1)    hdulist.close()            print('- Loading Image')    # import mask with objects to neglect and define the area of rejection    maskpath = 'A1_mosaic_nostar.fits'    hdulist=fits.open(maskpath)    image = hdulist[0].data    hdulist.close()                print('- Editing Mask',flush=True)    # remove large star at the center and borders from mask    ignore_area=np.ones(mask.shape)    ignore_area[2900:3500,1250:1642]=0    ignoreborder=150    ignore_area[:ignoreborder,:]=0 # ignore top border    ignore_area[-ignoreborder:,:]=0 # ignore bottom border    ignore_area[:,:ignoreborder]=0 # ignore left border    ignore_area[:,-ignoreborder:]=0 # ignore right border    mask=mask*ignore_area    area_of_rejection=mask    flipped_area_of_rejection=np.where(area_of_rejection>0,0,1) # one where masked, zero elsewhere    circular_kernel=get_circular_kernel(internalradius)        print('- Correcting mask for radius (convolution in progress)',flush=True)        # instead of checking if galaxy is further than one radius from mask,    # enlarge mask by one radius and check that galaxy is out of mask!    new_area_of_rejection = convolve(flipped_area_of_rejection,circular_kernel)    new_area_of_rejection=np.where(new_area_of_rejection>0,0,1)        show(np.where(new_area_of_rejection==0,zscale(image),np.nan))    # saveimage = np.where(new_area_of_rejection == 0, 0, 1)    # hdu = fits.PrimaryHDU(saveimage)    # hdu.writeto('nice_images/galaxy_rejection_area.fits')            newgalaxylist=[]        print('start cleaning galaxies outside of mask:',flush=True)    num_galaxies=len(galaxylist)    for index, galaxy in enumerate(galaxylist):        sys.stdout.write(f'\rGalaxy {index}/{num_galaxies}     ')        sys.stdout.flush()        row, col = galaxy[0:2].astype('int')        if new_area_of_rejection[row,col] == 1:            newgalaxylist.append(galaxy)        return newgalaxylist    def reject_galaxies_brightness(galaxylist, min_brightness, max_brightness):    newlist=[]    for galaxy in galaxylist:        row,col,brightness,number_pixels=galaxy.astype('int')        if brightness > min_brightness and brightness < max_brightness:            newlist.append(galaxy)                            return np.array(newlist)                                                                                                                                                                                                                                                                  def clean_list_galaxies(galaxylist,min_brightness=3400,max_brightness=3e4,ignore_border=150,radius=8):    print('cleaning list according to brightness')    galaxylist=reject_galaxies_brightness(galaxylist,min_brightness,max_brightness)        print('cleaning list according to radius:')    galaxylist=reject_galaxies_radius(galaxylist,radius,ignore_border)        return galaxylistdef get_circular_kernel(radius):    x = np.arange(2*radius + 1) - radius    y = np.arange(2*radius + 1) - radius        xx,yy=np.meshgrid(x,y)        base = ( yy**2 + xx**2 <= radius**2 )        return base.astype('int')    # reject_galaxies_radius([])